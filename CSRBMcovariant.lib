////////////////////////////////////////////////////////////////
version="version CSRBMcovariant.lib 1.0 Jul_2019 "; 
// summary description of the library
info="
LIBRARY:   CSRBMcovariant.lib  A library for compute covariants via 
		Cyclically Standard Regular Bracket Monomials
AUTHOR:    Yuki Nishida, email: ynishida.cyjc1901@gmail.com
";

LIB "qmatrix.lib";
////////////////////////////////////////////////////////////////////  // 


proc make_cyclicorder (int n) {
   //n is the degree of binary form
   intvec CO = 0;
   int k,j,d = 1,1,1;
   for (j = 1; j <= n + 1; j++) {
      for (k = 1;k <= n + 1; k++) {
         if (j < k) {CO[d] = k - j;}
         else {CO[d] = 2 * n;}
         d = d+1;
      }
   }
   return (CO);
}



proc make_root_ring (int n) {
   // n is the degree of binary form
   // a(i) means coefficeint of binary forms
   // b(i)(j) means [i j] where b(i)(n+1) is [i u] 
   //mu(i),nu(i) means homogenaized roots of the binary form
   ring poly_ring = 0, (a(0 .. n), X, Y), lp;
   ring diff_ring = 0, (b(1 .. n+1)(1 .. n+1)), Wp (make_cyclicorder (n));
   ring hom_root_ring = 0, (mu(1 .. n),nu(1 .. n), x, y), lp;
   return (diff_ring + hom_root_ring + poly_ring);
}


proc mon_brac_sym (int n, int N, intmat m, poly D) {
   // n is the degree of the binary form
   // N is factorial of n
   // m is all permutation of n
   // D is a bracket monomial
   // return the symmetrization of D
   intvec iv = 0;
   intvec s = 0;
   poly S = 0;
   poly M = leadcoef (D);
   int j, k = 1, 1;
   for (int l = 1; l <= N; l++) {
   s = m[l, 1..n];
   s[n + 1] = n + 1;
      for (j = 1; j <= n + 1; j++) {
         for (k = 1; k <= n + 1; k++) {
            iv[(n + 1) * (j - 1) + k] = 1;
            if (deg (D, iv) > 0) {
               M = M * b (s[j]) (s[k]) ^ deg(D, iv);
	    }         
            iv[(n + 1) * (j - 1) + k] = 0;
         }
      }
      S = S + M;
      M = leadcoef (D);
   }
   return (S);
}

proc brac_sym (int n,poly D) {
   // n is the degree of binary form
   // D is a bracket polynomial
   // return the symmetrization of D
   poly SY = 0;
   int t = size(D);
   intmat m = SymGroup(n);
   poly M = 1;
   int N = 1;
   for (int k = 1; k <= n; k++) {N = N * k;}
   for (k = 1; k <= t; k = k + 1) {
      M = lead (D);
      SY = SY + mon_brac_sym(n, N, m, M);
      D = D - M;
   }
   SY = SY * 1 / N;
   return (SY);
}

proc mon_brac_expand (int n, poly D) {
   // n is the degree of the binary form
   // D is a bracket mononomial 
   // express D in homogenaized roots
   poly M = leadcoef (D);
   intvec iv = 0;
   int k=1;
   for (int j = 1; j <= n; j++) {
      for (k = 1; k <= n; k++) {
         iv[(n + 1) * (j - 1) + k] = 1;
         if (deg (D, iv) > 0) {
            M = M * (mu(j) * nu(k) - mu(k) * nu(j)) ^ deg (D, iv);
         }
         iv[(n + 1) * (j - 1) + k] = 0;
      }
      iv[(n + 1) * (j - 1) + n + 1] = 1;
      if (deg (D, iv) > 0) {
          M = M * (mu(j) * x - nu(j) * y) ^ deg (D, iv);
      }
      iv[(n + 1) * (j - 1) + k] = 0;
   }
   for (k = 1; k <= n; k++) {
      iv[(n + 1) * n + k] = 1;
      if (deg (D, iv) > 0) {
         M = M * (nu(k) * y - mu(k) * x) ^ deg (D, iv);
      }
      iv[( n + 1) * n + k] = 0;
   }
   iv[(n + 1) ^ 2] = 1;
   if (deg (n, iv) > 0) {M = M * 0;}
   iv[(n + 1) ^ 2] = 0;
   return (M);
}

proc brac_expand (int n, poly D){
   // n is the degree of the binary form
   // D is a bracket polynomial 
   // express D in homogenized roots
   poly H = 0;
   int t = size (D);
   poly M = 1;
   for (int k = 1; k <= t; k++) {
      M = lead (D);
      H = H + mon_brac_expand (n, M);
      D = D - M;
   }
   return (H);
}

proc coef_homogenize(int n, int k) {
   // n is the degree of the binary form
   // return the homogenized roots expression of a_k
   intmat m = SymGroup (n);
   intvec s = 0;
   int N = 1;
   for (int j = 1; j <= n; j++) {N = N * j;}
   poly H = 0;
   poly M = 1;
   int l = 1;
   for (int i = 1;i <= N; i++) {
      s = m[i, 1 .. n];
      for (l = 1; l <= k; l++) {
         M = M * mu(s[l]);
      }
      for(l = k + 1; l<= n; l++) {
         M = M * nu(s[l]);
      }
      H = H + M;
      M = 1;
   }
   H = H * (-1) ^ k / N;
   return (H);
}



proc homogenize (int n, poly Q) {
   // n is the degree of the binary form
   // Q is the polynomial of a_k,x,and y
   // return the homogenized roots expression of I
   for (int k = 0; k <= n; k++) {
      Q = subst (Q, a(k), coef_homogenize (n, k));
   }
   Q = subst (Q, X, x, Y, y);
   return (Q);
}

proc hom_groebner (int n){
    // n is the degree of the binary form
    // return the groebner base which computes the inverse of hom. roots expression
   ideal i = 0;
   for (int k = 0; k <= n; k++) {
      i = i + (homogenize (n, a(k)) - a(k));
   }
   ideal G = groebner (i);
   return (G);
}

proc syzygy (int n) {
   // n is the degree of the binary form
   // return the syzygy ideal of bracket ring with n letters
   int i, j, k, l = 1, 1, 1, 1;
   ideal I = 0;
   for (i = 1; i <= n + 1; i++) {
      for (j = i+1; j <= n + 1; j++) {
         I = I + (b(i)(j) + b(j)(i));
      }
   }
   for (i = 1; i <= n + 1; i++) {
      for (j = i + 1; j <= n + 1; j++){
         for (k = j + 1; k <= n + 1; k++) {
            for (l = k + 1; l <= n + 1; l++){
               I = I + (b(i)(j) * b(k)(l) + b(j)(k) * b(i)(l) - b(i)(k) * b(j)(l));
            }
         }
      }
   }
   ideal G = groebner (I);
   return (G);
}





proc make_covariant (poly P, int n, ideal Syz) {
    // n is the degree of binary form
    // P is a regular bracket monomial
    // return the corresponding covariant in bracket expression
   poly P1 = brac_sym (n, P);
   poly P2 = reduce (P1, Syz);
   return (P2);
}

proc multicombination (int n, int d, int m) {
    // return the set of vectors of demension n 
    // the sum is m and the largest part is not greater than d
   intvec i = 0;
   int N, j, c, l = 1, 1, 0, 1;
   for (int k = 1; k <= n; k++) {
      if (k <= m div d) {i[k] = d;}
      else {i[k] = 0;}
   }
   i[m div d + 1] = m - (m div d) * d;
   list M = 0;
   M[1] = i;
   for (k = 1; k <= (d+1) ^ n; k = k + 1) {
      c = 0;
      for (j = 1; j <= n; j++) {
         c = c + i[j];
         if (i[j] < d && c > i[j]) {
            i[j] = i[j] + 1;
            for (l = 1; l <= (c - i[j]) div d; l++) {i[l] = d;}
            i[(c - i[j]) div d + 1] = c - i[j] - (c - i[j]) div d * d;
            for (l = (c - i[j]) div d + 2; l <= j-1; l++) {i[l] = 0;}
            break;
         }
      }
      if (j == n + 1) {break;}
      M[k + 1] = i;
      }
   return (M);
}

proc multitranslation (int n, int d) {
    // return the base of reg_d with n letters
   int m = n * d div 2;
   list Com = multicombination (n, d, m);
   int N = size (Com);     
   intvec C = 0;           
   intvec Q = 0;           
   poly M = 1;             
   list Cyc = 0;
   int i, j, k, t = 1, 1, 1, 1;
   intvec iv = 0;
   for (i = 1; i <= n; i++) {iv[i] = d;}
   for (i = 1; i <= N; i++) {
      for (j = 1; j <= n; j++) {C[j] = d - Com[i][j];}
      Q = iv;
      for (j = 1; j <= n; j++) {
         while (Com[i][j] > 0) {
            for (k = j - 1; k >= 1; k--) {
               if (C[k] > 0) {
                  M = M * b(k)(j);
                  C[k] = C[k] - 1;
                  Com[i][j] = Com[i][j] - 1;
                  Q[k] = Q[k] - 1;
                  Q[j] = Q[j] - 1;
                  break;
                }
            }
            if (k == 0) {break;}
          }
      }
      for (j = 1; j <= n; j++) {
         if (Q[j] > 0) {M = M * b(j)(n+1) ^ Q[j];}
      }
      Cyc[i] = M;
      M = 1;
      C = 0;
      Q = 0;}
   return (Cyc);
}


proc sym_brac_basis (int n, int d) {
   // return the basis of regular symmetric bracket polynomials with degree d
   int i, j, c = 1, 1, 1;
   poly P, Q, R = 1, 0, 0;
   list Bra = 0;
   list C  =multitranslation (n, d);
   ideal Syz = syzygy (n);
   int k = size (C);
   for (j = 1; j <= k; j++) {
      P = C[j];
      Q = brac_sym (n, P);
      R = reduce (Q, Syz);
      for (i = 1; i <= c - 1; i++){
         R = reduce (R, groebner (Bra[i]));
      }
      if (R != 0) {
         Bra[c] = R;
         c = c + 1;
       }
   }
   return (Bra);       
}


proc covariant_deg_fixed (int n,int d) {
    // return the basis of covariants with degree d of binary form of degree n
    // G is the ideal which make polynomial of homogenized roots into polynomial of a_k
   int i = 1;
   poly Q = 0;
   list Cov = 0;
   list Bra = sym_brac_basis (n, d);
   ideal G = hom_groebner (n);
   for (i = 1; i <= size (Bra); i++) {
      Q = brac_expand (n, Bra[i]);
      Cov[i] = factorize (reduce(Q, G));
   }
   return (Cov);       
}



